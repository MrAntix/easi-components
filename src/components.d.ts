/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { easiMessageTypes, EasiRegions, IEasi, IEasiMessages, IEasiScore } from "./models";
export { easiMessageTypes, EasiRegions, IEasi, IEasiMessages, IEasiScore } from "./models";
export namespace Components {
    interface AEasi {
        "score": IEasiScore | null;
        "showText": boolean;
        "value": IEasi;
    }
    interface AEasiErnie {
        "selectedRegion"?: EasiRegions;
        "value": IEasi;
    }
    interface AEasiMessages {
        "type": easiMessageTypes;
        "value": IEasiMessages;
    }
    interface AEasiSelect {
        "disabled": boolean;
        "errors"?: IEasiMessages;
        "nullValue": any;
        "options": any[];
        "optionsText": { [key: string]: string };
        "required": boolean;
        "showText": boolean;
        "validate": () => Promise<IEasiMessages>;
        "value"?: any;
    }
}
export interface AEasiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAEasiElement;
}
export interface AEasiErnieCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAEasiErnieElement;
}
export interface AEasiSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAEasiSelectElement;
}
declare global {
    interface HTMLAEasiElementEventMap {
        "valueChange": IEasi;
        "scoreChange": IEasiScore;
    }
    interface HTMLAEasiElement extends Components.AEasi, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAEasiElementEventMap>(type: K, listener: (this: HTMLAEasiElement, ev: AEasiCustomEvent<HTMLAEasiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAEasiElementEventMap>(type: K, listener: (this: HTMLAEasiElement, ev: AEasiCustomEvent<HTMLAEasiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAEasiElement: {
        prototype: HTMLAEasiElement;
        new (): HTMLAEasiElement;
    };
    interface HTMLAEasiErnieElementEventMap {
        "selectRegion": EasiRegions | null;
    }
    interface HTMLAEasiErnieElement extends Components.AEasiErnie, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAEasiErnieElementEventMap>(type: K, listener: (this: HTMLAEasiErnieElement, ev: AEasiErnieCustomEvent<HTMLAEasiErnieElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAEasiErnieElementEventMap>(type: K, listener: (this: HTMLAEasiErnieElement, ev: AEasiErnieCustomEvent<HTMLAEasiErnieElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAEasiErnieElement: {
        prototype: HTMLAEasiErnieElement;
        new (): HTMLAEasiErnieElement;
    };
    interface HTMLAEasiMessagesElement extends Components.AEasiMessages, HTMLStencilElement {
    }
    var HTMLAEasiMessagesElement: {
        prototype: HTMLAEasiMessagesElement;
        new (): HTMLAEasiMessagesElement;
    };
    interface HTMLAEasiSelectElementEventMap {
        "valueChange": any;
    }
    interface HTMLAEasiSelectElement extends Components.AEasiSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAEasiSelectElementEventMap>(type: K, listener: (this: HTMLAEasiSelectElement, ev: AEasiSelectCustomEvent<HTMLAEasiSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAEasiSelectElementEventMap>(type: K, listener: (this: HTMLAEasiSelectElement, ev: AEasiSelectCustomEvent<HTMLAEasiSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAEasiSelectElement: {
        prototype: HTMLAEasiSelectElement;
        new (): HTMLAEasiSelectElement;
    };
    interface HTMLElementTagNameMap {
        "a-easi": HTMLAEasiElement;
        "a-easi-ernie": HTMLAEasiErnieElement;
        "a-easi-messages": HTMLAEasiMessagesElement;
        "a-easi-select": HTMLAEasiSelectElement;
    }
}
declare namespace LocalJSX {
    interface AEasi {
        "onScoreChange"?: (event: AEasiCustomEvent<IEasiScore>) => void;
        "onValueChange"?: (event: AEasiCustomEvent<IEasi>) => void;
        "score"?: IEasiScore | null;
        "showText"?: boolean;
        "value"?: IEasi;
    }
    interface AEasiErnie {
        "onSelectRegion"?: (event: AEasiErnieCustomEvent<EasiRegions | null>) => void;
        "selectedRegion"?: EasiRegions;
        "value"?: IEasi;
    }
    interface AEasiMessages {
        "type"?: easiMessageTypes;
        "value"?: IEasiMessages;
    }
    interface AEasiSelect {
        "disabled"?: boolean;
        "errors"?: IEasiMessages;
        "nullValue"?: any;
        "onValueChange"?: (event: AEasiSelectCustomEvent<any>) => void;
        "options"?: any[];
        "optionsText"?: { [key: string]: string };
        "required"?: boolean;
        "showText"?: boolean;
        "value"?: any;
    }
    interface IntrinsicElements {
        "a-easi": AEasi;
        "a-easi-ernie": AEasiErnie;
        "a-easi-messages": AEasiMessages;
        "a-easi-select": AEasiSelect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "a-easi": LocalJSX.AEasi & JSXBase.HTMLAttributes<HTMLAEasiElement>;
            "a-easi-ernie": LocalJSX.AEasiErnie & JSXBase.HTMLAttributes<HTMLAEasiErnieElement>;
            "a-easi-messages": LocalJSX.AEasiMessages & JSXBase.HTMLAttributes<HTMLAEasiMessagesElement>;
            "a-easi-select": LocalJSX.AEasiSelect & JSXBase.HTMLAttributes<HTMLAEasiSelectElement>;
        }
    }
}
